version: '3.5'

services:
  # ============= SAMPLE SERVICES ======================================================================================================
  # ===================================================================================================================================
  apigateway.application.web:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_HTTPS_PORT=6100
    restart: unless-stopped
    ports:
      - 6000:80
      - 6100:443
#    healthcheck:
#      test: ["CMD", "curl", "-f", "https://localhost/health"] # https://docs.docker.com/compose/compose-file/
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro

  customers.application.web:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
    restart: unless-stopped
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost/health"]
    ports:
      - 6001:80 # The API Gateway redirects and access through the internal port (80)
                # In a production environment the external port (5002) should be removed, kept here for microservice debugging purposes

  orders.application.web:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
    restart: unless-stopped
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost/health"]
    ports:
      - 6002:80 # The API Gateway redirects and access through the internal port (80)
                # In a production environment the external port (5006) should be removed, kept here for microservice debugging purposes

  # ============= INFRASTRUCTURE ======================================================================================================
  # ===================================================================================================================================
  mssql:
    image: mcr.microsoft.com/mssql/server
    container_name: mssql
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Abcd1234! # Server=sqlserver;Database=naos_sample;User=sa;Password=Abcd1234!;Trusted_Connection=False;MultipleActiveResultSets=True;
      - MSSQL_PID=Developer
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S mssql -U SA -P 'Abcd1234!' -Q 'select 1'
    ports:
      - 1433:1433
    volumes:
      - mssql:/var/opt/mssql

  mssqlscripts:
    image: mcr.microsoft.com/mssql-tools
    depends_on:
      - mssql
    command: /bin/bash -c 'until /opt/mssql-tools/bin/sqlcmd -S mssql -U sa -P "Abcd1234!" -Q "create database Keycloak"; do sleep 5; done'

  mongo:
    image: mongo
    container_name: mongo   # mongodb://mongo:27017,db2.example.net:2500/?connectTimeoutMS=300000
    restart: unless-stopped
    ports:
      - 27017:27017
    volumes:
      - mongo:/data/db

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672 # http://localhost:15672
    # volumes:
    #   - rabbitmq:/var/lib/rabbitmq

  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    restart: unless-stopped
    ports:
      - 5775:5775/udp
      - 5778:5778
      - 6831:6831/udp
      - 6832:6832/udp
      # - 9411:9411
      - 14268:14268
      - 16686:16686 # http://localhost:16686/search

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: unless-stopped
    environment:
      - STORAGE_TYPE=mem # more here https://github.com/openzipkin-attic/docker-zipkin mysql: https://www.linode.com/docs/uptime/analytics/zipkin-server-configuration-using-docker-and-mysql/
      # Uncomment to disable scribe
      # - SCRIBE_ENABLED=false
      # Uncomment to enable self-tracing
      # - SELF_TRACING_ENABLED=true
      # Uncomment to enable debug logging
      # - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG
    ports:
      - 9411:9411 # http://localhost:9411/zipkin/

  keycloak:
    image: jboss/keycloak
    container_name: keycloak
    restart: unless-stopped
    depends_on:
      - mssql
      - mssqlscripts
    ports:
      - 8080:8080 # http://localhost:8080 (admin/admin)
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - DB_VENDOR=mssql # https://github.com/keycloak/keycloak-containers/tree/master/docker-compose-examples
      - DB_USER=sa
      - DB_PASSWORD=Abcd1234!
      - DB_ADDR=mssql
      - DB_DATABASE=Keycloak

volumes:
  mssql:
    driver: local
  mongo:
    driver: local
  rabbitmq:
    driver: local
